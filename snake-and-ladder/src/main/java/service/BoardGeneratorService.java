package service;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Random;
import java.util.Scanner;
import java.util.Set;

import model.Board;
import model.Constants;
import model.Ladder;
import model.Snake;

public class BoardGeneratorService {

    public Board getCustomizedBoard() {
        Scanner scanner = new Scanner(System.in);
        int boardSize;
        List<Snake> snakes = new ArrayList<>();
        List<Ladder> ladders = new ArrayList<>();

        System.out.println("Board Size: ");
        boardSize = scanner.nextInt();
        System.out.println("Total Snakes: ");
        int totalSnakes = scanner.nextInt();
        System.out.println("Total Ladders: ");
        int totalLadders = scanner.nextInt();
        int head, tail, start, end;
        for (int i = 0; i < totalSnakes; i++) {
            System.out.println("Snake " + i);
            System.out.println("Head: ");
            head = scanner.nextInt();
            System.out.println("Tail: ");
            tail = scanner.nextInt();
            Snake snake = new Snake(head, tail);
            snakes.add(snake);
        }
        for (int i = 0; i < totalLadders; i++) {
            System.out.println("Ladder " + i);
            System.out.println("Start: ");
            start = scanner.nextInt();
            System.out.println("End: ");
            end = scanner.nextInt();
            Ladder ladder = new Ladder(start, end);
            ladders.add(ladder);
        }
        return new Board(boardSize, snakes, ladders);
    }

    public Board getAutoGeneratedBoard() {
        int boardSize = Constants.DEFAULT_BOARD_SIZE;
        int totalSnakes = Constants.DEFAULT_TOTAL_SNAKES;
        int totalLadders = Constants.DEFAULT_TOTAL_LADDERS;

        List<Snake> snakeList = new ArrayList<>();
        List<Ladder> ladderList = new ArrayList<>();

        Set<Integer> slSet = new HashSet<>();
        Random random = new Random();
        while (totalLadders != 0) {
            int start = random.nextInt(boardSize - 1) + 1; // Range - 1 : 99
            if (slSet.contains(start))
                continue;
            int end = random.nextInt(boardSize - start) + start + 1; // Range - start : 100
            slSet.add(start);
            ladderList.add(new Ladder(start, end));
            totalLadders--;
        }
        while (totalSnakes != 0) {
            int head = random.nextInt(boardSize - 2) + 2; // Range - 99 : 2
            if (slSet.contains(head))
                continue;
            int tail = random.nextInt(head - 1) + 1; // Range - 1 : head
            slSet.add(head);
            snakeList.add(new Snake(head, tail));
            totalSnakes--;
        }

        System.out.println("Snakes at: \n");
        for (Snake snake : snakeList) {
            System.out.println(snake.getHead() + "->" + snake.getTail() + "\n");
        }
        System.out.println("Ladders at: \n");
        for (Ladder ladder : ladderList) {
            System.out.println(ladder.getStart() + "->" + ladder.getEnd() + "\n");
        }

        return new Board(boardSize, snakeList, ladderList);
    }
}
